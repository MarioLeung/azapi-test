/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * XObjectPV.java
 *
 * Created on 13/09/2011, 04:36:22
 */
package bc.swing.pfrm.params.views;

import bc.dsl.XNavDSL;
import bc.swing.pfrm.ano.ViewHints;
import bc.swing.pfrm.params.ParamModel;
import bc.swing.pfrm.params.ParamView;
import bc.x.model.XCommand;
import bc.x.model.XObject;
import bc.x.view.XParametersPanel;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import nu.xom.ParsingException;

/**
 *
 * @author bennyl
 */
public class XObjectPV extends javax.swing.JPanel implements ParamView {
    XObject obj;

    /** Creates new form XObjectPV */
    public XObjectPV() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jscroll = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        jscroll.setBackground(new java.awt.Color(255, 255, 255));
        jscroll.setBorder(null);
        add(jscroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jscroll;
    // End of variables declaration//GEN-END:variables

    public void setModel(ParamModel model) {
        final Object value = model.getValue();
        obj = null;
        if (value instanceof XObject) {
            obj = (XObject) model.getValue();
        } else {
            ViewHints vh = model.getViewHints();
            try {
                obj = XCommand.create(XNavDSL.xload(new File(vh.xmlMetadataPath())).getRootElement());
                obj.readValuesFromMap((Map)value);
            } catch (ParsingException ex) {
                Logger.getLogger(XObjectPV.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(XObjectPV.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (obj != null) {
            XParametersPanel ppan = new XParametersPanel(obj, model.getViewHints().withVars());
            jscroll.setViewportView(ppan);
            validate();
            repaint();
        }
    }

    public void reflectChanges(ParamModel to) {
        final Object value = to.getValue();
        if (value instanceof Map) {
            Map mval = (Map) value;
            mval.putAll(obj.asValueMap());
        }
    }

    public void onChange(ParamModel source, Object newValue, Object deltaHint) {
    }
}
